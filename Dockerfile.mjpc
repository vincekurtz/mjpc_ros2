# syntax=docker/dockerfile:1

# ################### #
# essential top-level #
# ################### #

FROM nvidia/cuda:11.8.0-cudnn8-devel-ubuntu22.04
SHELL ["/bin/bash", "-c"]

# without this, moveit-visual-tools sometimes complains and fails to build
ENV TZ=America/Los_Angeles
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# installing essential dependencies
# mesa-utils needed for moveit + OMPL to work correctly
RUN apt-get update -y --allow-insecure-repositories && apt-get install curl -y
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null
RUN apt-get update -y
RUN apt-get install -y \
    build-essential \
    cmake \
    git \
    python-is-python3 \
    python3-pip \
    nano \
    mesa-utils \
    ros-humble-ros-base \
    python3-argcomplete \
    ros-dev-tools \
    libegl1 \
    libgl1 \
    libgomp1 \
    libpoco-dev \
    libeigen3-dev \
    libopencv-dev \
    python3-dev \
    python3-opencv \
    libqt5network5 \
    libqt5widgets5 \
    libqt5opengl5 \
    libqt5xml5 \
    libgl1-mesa-dev \
    libxinerama-dev \
    libxcursor-dev \
    libxrandr-dev \
    libxi-dev \
    ninja-build

# ############# #
# ros2 packages #
# ############# #
RUN apt-get update && apt-get install --allow-unauthenticated -y \
    ros-humble-control-msgs \
    ros-humble-xacro \
    ros-humble-angles \
    ros-humble-ros2-control \
    ros-humble-realtime-tools \
    ros-humble-control-toolbox \
    ros-humble-moveit \
    ros-humble-moveit-common \
    ros-humble-moveit-ros-planning \
    ros-humble-moveit-ros-planning-interface \
    ros-humble-moveit-ros-visualization \
    ros-humble-moveit-visual-tools \
    ros-humble-rviz-visual-tools \
    ros-humble-ros2-controllers \
    ros-humble-joint-state-publisher \
    ros-humble-joint-state-publisher-gui \
    ros-humble-ament-cmake-clang-format \
    ros-humble-diagnostic-updater \
    ros-humble-geographic-msgs \
    ros-humble-robot-localization \
    ros-humble-rosidl-generator-cpp \
    ros-humble-rosidl-default-generators \
    ros-humble-image-transport \
    ros-humble-ament-lint-auto \
    ros-humble-ament-cmake-copyright \
    ros-humble-ament-cmake-cppcheck \
    ros-humble-ament-cmake-lint-cmake \
    ros-humble-ament-cmake-pep257 \
    ros-humble-ament-cmake-uncrustify \
    ros-humble-ament-cmake-xmllint \
    ros-humble-nmea-msgs \
    ros-humble-graph-msgs \
    ros-humble-rqt* \
    ros-humble-pinocchio \
    ros-humble-can-msgs \
    ros-humble-test-msgs \
    ros-humble-ament-cmake-pycodestyle
WORKDIR /root/dev_ws
RUN mkdir src
RUN rosdep init && rosdep update && rosdep install --from-paths src --ignore-src -r -y
RUN source /opt/ros/humble/setup.bash && \
    colcon build --parallel-workers $(nproc) \
    --symlink-install --event-handlers console_direct+ --base-paths src \
    --cmake-args ' -DCMAKE_BUILD_TYPE=Release' \
    ' -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs' \
    ' -DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined"' \
    ' --no-warn-unused-cli'

# update pip so recent packages are correctly indexed
WORKDIR /root/dev_ws
RUN python -m pip install --upgrade pip

# ################### #
# python dependencies #
# ################### #
COPY requirements.txt ./
RUN python -m pip install --ignore-installed -r requirements.txt

# cloning the mjpc fork
# [TODO] specify the branch you want to clone. the branch should include the fix to the install paths.
RUN git clone -b allegro_cube https://github.com/vincekurtz/mujoco_mpc.git
WORKDIR /root/dev_ws/mujoco_mpc/python
RUN python setup.py install
RUN python setup_direct.py install
RUN python setup_filter.py install

# ########### #
# qol + hacks #
# ########### #
# colored error messages
RUN echo "export RCUTILS_COLORIZED_OUTPUT=1" >> ~/.bashrc

# ################ #
# custom ROS2 code #
# ################ #
WORKDIR /root/dev_ws

# Add custom packages
ADD dev_ws/src/minimal_publisher src/minimal_publisher
ADD dev_ws/src/allegro_mjpc src/allegro_mjpc

# Build the custom packages
RUN source /root/dev_ws/install/setup.bash && \
    colcon build --cmake-args '-DCMAKE_BUILD_TYPE=Release' \
    '-DPYTHON_EXECUTABLE=/usr/bin/python' \
    '-DPYTHON_LIBRARY=/usr/lib/x86_64-linux-gnu/libpython3.10.so' \
    '-DPYTHON_INCLUDE_DIR=/usr/include/python3.10' \
    --parallel-workers $(nproc)
RUN echo "source /root/dev_ws/install/setup.sh" >> ~/.bashrc
